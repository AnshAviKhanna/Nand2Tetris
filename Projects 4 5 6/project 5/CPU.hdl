// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU 
{
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //check instruction : A or C
    Not(in=instruction[15], out=isA);
    Or(a=instruction[15], b=false, out=isC);

    //when to load A reg if inst A or (inst C & dest is A)
    And(a=isC, b=instruction[5], out=CloadA);
    Or(a=isA, b=CloadA, out=writeA);

    //load A reg according to the instruction (write ALUout or instA to reg A)
    Mux16(a=instruction, b=ALUout, sel=CloadA, out=Ain);
    ARegister(in=Ain, load=writeA, out=Aout, out[0..14]=addressM);

    //ALU input : A(from reg A) or M(from inM)
    Mux16(a=Aout, b=inM, sel=instruction[12], out=ALUinputAM);

    //C inst with dest = D 
    And(a=isC, b=instruction[4], out=writeD);
    DRegister(in=ALUout, load=writeD, out=Dout);
    
    //ALU
    ALU(
        x=Dout, y=ALUinputAM,
        zx=instruction[11],    //c1
        nx=instruction[10],    //c2
        zy=instruction[9],     //c3
        ny=instruction[8],     //c4
        f=instruction[7],      //c5
        no=instruction[6],     //c6
        out=ALUout,
        out=outM,
        zr=ZEROout,
        ng=NEGout
    );

    //write to Memory
    And(a=isC, b=instruction[3], out=writeM);

    //declaring flags : nonZERO , nonNEG , POS
    Not(in=ZEROout, out=nonZERO);
    Not(in=NEGout, out=nonNEG);
    And(a=nonZERO, b=nonNEG, out=POS);

    //JUMP conditions
    And(a=instruction[0], b=POS, out=JGT);
    And(a=instruction[1], b=ZEROout, out=JEQ);
    And(a=instruction[2], b=NEGout, out=JLT);
    Or(a=JGT, b=JEQ, out=JGE);

    //check if jump condition is satisfied
    Or(a=JLT, b=JGE, out=jumpTRUE);

    //load PC if (intr C && JUMP)
    And(a=isC, b=jumpTRUE, out=loadPC);

    //if PC is not loaded, increment PC (for next instruction)
    Not(in=loadPC, out=PCinc);

    PC(in=Aout, inc=PCinc, load=loadPC, reset=reset, out[0..14]=pc);

}